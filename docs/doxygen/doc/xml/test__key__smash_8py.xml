<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="test__key__smash_8py" kind="file" language="Python">
    <compoundname>test_key_smash.py</compoundname>
    <innerclass refid="classtests_1_1data__pipeline_1_1feature__engineering_1_1test__key__smash_1_1TestKeySmash" prot="public">tests::data_pipeline::feature_engineering::test_key_smash::TestKeySmash</innerclass>
    <innernamespace refid="namespacetests_1_1data__pipeline_1_1feature__engineering_1_1test__key__smash">tests::data_pipeline::feature_engineering::test_key_smash</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacetests_1_1data__pipeline_1_1feature__engineering_1_1test__key__smash" refkind="compound"><highlight class="keyword">import</highlight><highlight class="normal"><sp/>pytest</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedata__pipeline_1_1feature__engineering_1_1key__smash" kindref="compound">data_pipeline.feature_engineering.key_smash</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>KeySmash</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5" refid="classtests_1_1data__pipeline_1_1feature__engineering_1_1test__key__smash_1_1TestKeySmash" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtests_1_1data__pipeline_1_1feature__engineering_1_1test__key__smash_1_1TestKeySmash" kindref="compound">TestKeySmash</ref>:</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtests_1_1data__pipeline_1_1feature__engineering_1_1test__key__smash_1_1TestKeySmash_1a2b4d9708879e39e48552662f1c67b7a5" kindref="member">setup_method</ref>(self):</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtests_1_1data__pipeline_1_1feature__engineering_1_1test__key__smash_1_1TestKeySmash_1ad158350fead5c7a5f354cca31b049e13" kindref="member">key_smash</ref><sp/>=<sp/><ref refid="classdata__pipeline_1_1feature__engineering_1_1key__smash_1_1KeySmash" kindref="compound">KeySmash</ref>()</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>@pytest.mark.parametrize(</highlight><highlight class="stringliteral">&quot;data,<sp/>expected_output&quot;</highlight><highlight class="normal">,<sp/>[</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;PUENTECILLA<sp/>KM.<sp/>1.7&quot;</highlight><highlight class="normal">,<sp/>1.121212121212121),</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;ASDASD<sp/>XXXX&quot;</highlight><highlight class="normal">,<sp/>3.0)</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>])</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtests_1_1data__pipeline_1_1feature__engineering_1_1test__key__smash_1_1TestKeySmash_1aecfc93375a814a4e1501bafc28bb1117" kindref="member">test_char_frequency_metric</ref>(self,<sp/>data,<sp/>expected_output):</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>self.<ref refid="classtests_1_1data__pipeline_1_1feature__engineering_1_1test__key__smash_1_1TestKeySmash_1ad158350fead5c7a5f354cca31b049e13" kindref="member">key_smash</ref>.calculate_char_frequency_metric(data)<sp/>==<sp/>expected_output</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>@pytest.mark.parametrize(</highlight><highlight class="stringliteral">&quot;data,<sp/>opt,<sp/>expected_output&quot;</highlight><highlight class="normal">,<sp/>[</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;PUENTECILLA<sp/>KM.<sp/>1.7&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;vowels&quot;</highlight><highlight class="normal">,<sp/>0.21052631578947367),</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;ASDASD<sp/>XXXX&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;consonants&quot;</highlight><highlight class="normal">,<sp/>2.1818181818181817)</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>])</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtests_1_1data__pipeline_1_1feature__engineering_1_1test__key__smash_1_1TestKeySmash_1a0f33a820c9674a083ee5ff4445e23c45" kindref="member">test_irregular_sequence_metric</ref>(self,<sp/>data,<sp/>opt,<sp/>expected_output):</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>self.<ref refid="classtests_1_1data__pipeline_1_1feature__engineering_1_1test__key__smash_1_1TestKeySmash_1ad158350fead5c7a5f354cca31b049e13" kindref="member">key_smash</ref>.calculate_irregular_sequence_metric(data,<sp/>opt)<sp/>==<sp/>expected_output</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>@pytest.mark.parametrize(</highlight><highlight class="stringliteral">&quot;data,<sp/>expected_output&quot;</highlight><highlight class="normal">,<sp/>[</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;ABC<sp/>123<sp/>!@#&quot;</highlight><highlight class="normal">,<sp/>0.0),</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;ABC123<sp/>!@#&quot;</highlight><highlight class="normal">,<sp/>0.9)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>])</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classtests_1_1data__pipeline_1_1feature__engineering_1_1test__key__smash_1_1TestKeySmash_1ac0365d10a5a6dd01ba1e2c30151c166d" kindref="member">test_number_count_metric</ref>(self,<sp/>data,<sp/>expected_output):</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>self.<ref refid="classtests_1_1data__pipeline_1_1feature__engineering_1_1test__key__smash_1_1TestKeySmash_1ad158350fead5c7a5f354cca31b049e13" kindref="member">key_smash</ref>.calculate_number_count_metric(data)<sp/>==<sp/>expected_output</highlight></codeline>
    </programlisting>
    <location file="/mnt/c/Users/Pedro/dev/repo/Trabalho-Individual-2022-2-/tests/data_pipeline/feature_engineering/test_key_smash.py"/>
  </compounddef>
</doxygen>
